diff --git a/ui/app/(platform)/schedule/CalendarNavigation.tsx b/ui/app/(platform)/schedule/CalendarNavigation.tsx
new file mode 100644
index 0000000..4ec27a4
--- /dev/null
+++ b/ui/app/(platform)/schedule/CalendarNavigation.tsx
@@ -0,0 +1,21 @@
+import styles from "./page.module.scss";
+
+export const CalendarNavigation = ({
+  goToPrevMonth,
+  goToNextMonth,
+  currentMonth,
+  currentYear,
+  months,
+}: any) => {
+  return (
+    <div className={styles.navigation}>
+      <button className={styles.arrow} onClick={goToPrevMonth}>
+        ❮
+      </button>
+      <span>{`${months[currentMonth]}, ${currentYear}`}</span>
+      <button className={styles.arrow} onClick={goToNextMonth}>
+        ❯
+      </button>
+    </div>
+  );
+};
diff --git a/ui/app/(platform)/schedule/Day.tsx b/ui/app/(platform)/schedule/Day.tsx
new file mode 100644
index 0000000..7bab4d1
--- /dev/null
+++ b/ui/app/(platform)/schedule/Day.tsx
@@ -0,0 +1,19 @@
+import styles from "./page.module.scss";
+import { EventsList } from "./EventsList";
+import { weekdays } from "./constants";
+
+export const Day = ({
+  day,
+  dayofweek,
+  isToday,
+  eventsForThisDay,
+  user,
+}: any) => (
+  <div className={styles.day} data-week={weekdays[dayofweek]} data-date={day}>
+    <div className={`${styles.date} ${isToday(day) ? styles.today : ""}`}>
+      {day}
+    </div>
+
+    <EventsList events={eventsForThisDay} user={user} />
+  </div>
+);
diff --git a/ui/app/(platform)/schedule/EventItem.tsx b/ui/app/(platform)/schedule/EventItem.tsx
new file mode 100644
index 0000000..c856853
--- /dev/null
+++ b/ui/app/(platform)/schedule/EventItem.tsx
@@ -0,0 +1,34 @@
+import { Group } from "@/app/features/interfaces/Group";
+import styles from "./page.module.scss";
+import { AppDispatch } from "@/app/store";
+import { useDispatch } from "react-redux";
+import { deleteSchedule } from "@/app/features/schedulesSlice";
+
+export const EventItem = ({ className, index, user, item }: any) => {
+  const dispatch = useDispatch<AppDispatch>();
+
+  return (
+    <div className={className} key={index}>
+      <div className={styles.info}>
+        <div className={styles.time}>{item.time}</div>
+        <div className={styles.infoBox}>
+          {user?.role == "teacher" && (
+            <div className={styles.groups}>
+              {item.groups?.map((group: Group) => {
+                return <div>{group.name}</div>;
+              })}
+            </div>
+          )}
+          <div className={styles.activity}>{item.activity}</div>
+          <div className={styles.place}>{item.place}</div>
+        </div>
+        <button
+          className={styles.deleteButton}
+          onClick={() => dispatch(deleteSchedule(item.id))}
+        >
+          &times; {/* Символ крестика */}
+        </button>
+      </div>
+    </div>
+  );
+};
diff --git a/ui/app/(platform)/schedule/EventsList.tsx b/ui/app/(platform)/schedule/EventsList.tsx
new file mode 100644
index 0000000..6b06c46
--- /dev/null
+++ b/ui/app/(platform)/schedule/EventsList.tsx
@@ -0,0 +1,32 @@
+import styles from "./page.module.scss";
+import { EventItem } from "./EventItem";
+import { dynamicSort } from "./sortArrayByElementsProperty";
+
+const classNames = {
+  permanent: styles.permanent,
+  additional: styles.additional,
+  concert: styles.concert,
+};
+
+interface EventsListProps {
+  events: { type: keyof typeof classNames; time: string }[];
+  user: any;
+}
+
+export const EventsList = ({ events, user }: EventsListProps) => (
+  <>
+    {events.sort(dynamicSort("time")).map((item, index) => {
+      const className = classNames[item.type]; // TypeScript точно знает, что item.type — это ключ из classNames.
+
+      return (
+        <EventItem
+          key={index}
+          className={className}
+          index={index}
+          user={user}
+          item={item}
+        />
+      );
+    })}
+  </>
+);
diff --git a/ui/app/(platform)/schedule/constants.js b/ui/app/(platform)/schedule/constants.js
new file mode 100644
index 0000000..7e397a9
--- /dev/null
+++ b/ui/app/(platform)/schedule/constants.js
@@ -0,0 +1,16 @@
+export const months = [
+  "январь",
+  "февраль",
+  "март",
+  "апрель",
+  "май",
+  "июнь",
+  "июль",
+  "август",
+  "сентябрь",
+  "октябрь",
+  "ноябрь",
+  "декабрь",
+];
+
+export const weekdays = ["ПН", "ВТ", "СР", "ЧТ", "ПТ", "СБ", "ВС"];
diff --git a/ui/app/(platform)/schedule/page.module.scss b/ui/app/(platform)/schedule/page.module.scss
index ea8d25b..8e1c85d 100644
--- a/ui/app/(platform)/schedule/page.module.scss
+++ b/ui/app/(platform)/schedule/page.module.scss
@@ -60,7 +60,7 @@
   .calendarGrid {
     display: grid;
     grid-template-columns: repeat(7, calc((100% - 5px * 6) / 7));
-    grid-template-rows: 30px repeat(6, calc(55vw / 7));
+    // grid-template-rows: 30px repeat(6, calc(55vw / 7));
     margin-top: 20px;
     gap: 5px;
     padding: 5px;
diff --git a/ui/app/(platform)/schedule/page.tsx b/ui/app/(platform)/schedule/page.tsx
index 02f0c95..9e7174a 100644
--- a/ui/app/(platform)/schedule/page.tsx
+++ b/ui/app/(platform)/schedule/page.tsx
@@ -3,37 +3,42 @@
 import styles from "./page.module.scss";
 import { getDaysInMonth, getFirstDayOfMonth } from "./getDaysInMonth.js";
 import ScheduleMeaning from "./ScheduleMeaning";
-import { dynamicSort } from "./sortArrayByElementsProperty";
 import { useDispatch, useSelector } from "react-redux";
 import { AppDispatch, RootState } from "@/app/store";
-import { useEffect, useState } from "react";
-import { deleteSchedule, getSchedule } from "@/app/features/schedulesSlice";
+import { useCallback, useEffect, useMemo, useState } from "react";
+import { getSchedule } from "@/app/features/schedulesSlice";
 import { AddScheduleTabs } from "./AddSchedule";
+import { CalendarNavigation } from "./CalendarNavigation";
+import { Day } from "./Day";
+import { months, weekdays } from "./constants";
 
 const Schedule = () => {
-  const months = [
-    "январь",
-    "февраль",
-    "март",
-    "апрель",
-    "май",
-    "июнь",
-    "июль",
-    "август",
-    "сентябрь",
-    "октябрь",
-    "ноябрь",
-    "декабрь",
-  ];
-
   const [currentMonth, setCurrentMonth] = useState(new Date().getMonth());
   const [currentYear, setCurrentYear] = useState(new Date().getFullYear());
 
   const user = useSelector((state: RootState) => state.users.activeUser);
   const schedule = useSelector((state: RootState) => state.schedule.current);
 
-  const daysInMonth = getDaysInMonth(currentYear, currentMonth);
-  const firstDayOfWeek = getFirstDayOfMonth(currentYear, currentMonth);
+  const daysInMonth = useMemo(
+    () => getDaysInMonth(currentYear, currentMonth),
+    [currentYear, currentMonth]
+  );
+  const firstDayOfWeek = useMemo(
+    () => getFirstDayOfMonth(currentYear, currentMonth),
+    [currentYear, currentMonth]
+  );
+
+  // Пустые дни в начале календаря
+  const emptyDaysCount = useMemo(
+    () => (firstDayOfWeek + 6) % 7,
+    [firstDayOfWeek]
+  );
+
+  // Определяем количество строк в календаре
+  const calendarRows = useMemo(
+    () => Math.ceil((daysInMonth + emptyDaysCount) / 7),
+    [daysInMonth, emptyDaysCount]
+  );
 
   const dispatch = useDispatch<AppDispatch>();
 
@@ -43,28 +48,25 @@ const Schedule = () => {
     }
   }, [user, dispatch]);
 
-  const goToNextMonth = () => {
-    if (currentMonth === 11) {
-      setCurrentMonth(0);
-      setCurrentYear(currentYear + 1);
-    } else {
-      setCurrentMonth(currentMonth + 1);
-    }
-  };
+  const goToNextMonth = useCallback(() => {
+    setCurrentMonth((prev) => (prev === 11 ? 0 : prev + 1));
+    setCurrentYear((prev) => (currentMonth === 11 ? prev + 1 : prev)); // Обновляем год при переходе на январь
+  }, [currentMonth]);
 
-  const goToPrevMonth = () => {
-    if (currentMonth === 0) {
-      setCurrentMonth(11);
-      setCurrentYear(currentYear - 1);
-    } else {
-      setCurrentMonth(currentMonth - 1);
-    }
-  };
+  const goToPrevMonth = useCallback(() => {
+    setCurrentMonth((prev) => (prev === 0 ? 11 : prev - 1));
+    setCurrentYear((prev) => (currentMonth === 0 ? prev - 1 : prev)); // Обновляем год при переходе на декабрь
+  }, [currentMonth]);
 
   const generateCalendar = () => {
     const calendar: any = [];
-    const weekdays = ["ПН", "ВТ", "СР", "ЧТ", "ПТ", "СБ", "ВС"];
-    const emptyDaysCount = (firstDayOfWeek + 6) % 7;
+
+    const today = new Date();
+
+    const isToday = (day: number) =>
+      day === today.getDate() &&
+      currentMonth === today.getMonth() &&
+      currentYear === today.getFullYear();
 
     // первая строка: названия дней недели
     weekdays.forEach((weekDay, index) => {
@@ -81,27 +83,15 @@ const Schedule = () => {
     }
 
     let dayofweek = emptyDaysCount;
-    for (let day = 1; day <= daysInMonth; day++) {
-      console.log(schedule);
 
-      const permanentEventsForThisDay = schedule.filter((item) => {
+    for (let day = 1; day <= daysInMonth; day++) {
+      const eventsForThisDay = schedule.filter((item) => {
         if (item.type === "permanent") {
           return item.date === weekdays[dayofweek];
-        }
-      });
-
-      const additionalEventsForThisDay = schedule.filter((item) => {
-        if (item.type !== "permanent") {
-          let [eventDay, eventMonth] = item.date.split("-");
-
-          if (eventDay[0] === "0") {
-            eventDay = eventDay[1];
-          }
-
-          if (eventMonth[0] === "0") {
-            eventMonth = eventMonth[1];
-          }
-
+        } else {
+          const [eventDay, eventMonth] = item.date
+            .split("-")
+            .map((v) => v.replace(/^0/, "")); // Убираем ведущие нули
           return (
             day.toString() === eventDay &&
             (currentMonth + 1).toString() === eventMonth
@@ -109,71 +99,18 @@ const Schedule = () => {
         }
       });
 
-      const eventsForThisDay = [
-        ...permanentEventsForThisDay,
-        ...additionalEventsForThisDay,
-      ];
-
       calendar.push(
-        <div
+        <Day
           key={day - 1}
-          className={styles.day}
-          data-week={weekdays[dayofweek]}
-          data-date={day}
-        >
-          <div
-            className={
-              day === new Date().getDate() &&
-              currentMonth === new Date().getMonth() &&
-              currentYear === new Date().getFullYear()
-                ? `${styles.date} ${styles.today}`
-                : styles.date
-            }
-          >
-            {day}
-          </div>
-
-          {eventsForThisDay.sort(dynamicSort("time")).map((item, index) => {
-            const classNames: Record<string, string> = {
-              permanent: styles.permanent,
-              additional: styles.additional,
-              concert: styles.concert,
-            };
-
-            const className = classNames[item.type] || "unknown";
-
-            return (
-              <div className={className} key={index}>
-                <div className={styles.info}>
-                  <div className={styles.time}>{item.time}</div>
-                  <div className={styles.infoBox}>
-                    {user?.role == "teacher" && (
-                      <div className={styles.groups}>
-                        {item.groups?.map((group) => {
-                          return <div>{group.name}</div>;
-                        })}
-                      </div>
-                    )}
-                    <div className={styles.activity}>{item.activity}</div>
-                    <div className={styles.place}>{item.place}</div>
-                  </div>
-                  <button
-                    className={styles.deleteButton}
-                    onClick={() => dispatch(deleteSchedule(item.id))}
-                  >
-                    &times; {/* Символ крестика */}
-                  </button>
-                </div>
-              </div>
-            );
-          })}
-        </div>
+          day={day}
+          dayofweek={dayofweek}
+          isToday={isToday}
+          eventsForThisDay={eventsForThisDay}
+          user={user}
+        />
       );
 
-      dayofweek++;
-      if (dayofweek >= weekdays.length) {
-        dayofweek = 0;
-      }
+      dayofweek = (dayofweek + 1) % weekdays.length;
     }
 
     return calendar;
@@ -184,17 +121,20 @@ const Schedule = () => {
       <div className={`${styles.wrapperSchedule} wrapper`}>
         <ScheduleMeaning />
 
-        <div className={styles.navigation}>
-          <button className={styles.arrow} onClick={goToPrevMonth}>
-            ❮
-          </button>
-          <span>{`${months[currentMonth + 1]}, ${currentYear}`}</span>
-          <button className={styles.arrow} onClick={goToNextMonth}>
-            ❯
-          </button>
-        </div>
+        <CalendarNavigation
+          goToPrevMonth={goToPrevMonth}
+          goToNextMonth={goToNextMonth}
+          currentMonth={currentMonth}
+          currentYear={currentYear}
+          months={months}
+        />
 
-        <div className={styles.calendarGrid}>
+        <div
+          className={styles.calendarGrid}
+          style={{
+            gridTemplateRows: `30px repeat(${calendarRows}, calc(55vw / 7))`,
+          }}
+        >
           {schedule && generateCalendar()}
         </div>
       </div>
diff --git a/ui/app/(platform)/students/page.module.scss b/ui/app/(platform)/students/page.module.scss
index ce183e9..c8a3764 100644
--- a/ui/app/(platform)/students/page.module.scss
+++ b/ui/app/(platform)/students/page.module.scss
@@ -1,10 +1,18 @@
 .wrapperStudents {
   display: flex;
+  flex-direction: column;
+  margin-top: 20px;
+
+  .addStudent {
+    border: 1px black dashed;
+    padding: 5px !important;
+    width: 200px;
+    text-align: center;
+  }
 
   .students {
-    margin-top: 50px;
     display: flex;
-    gap: 100px;
+    justify-content: space-between;
 
     @media screen and (max-width: 700px) {
       flex-direction: column;
diff --git a/ui/app/(platform)/students/page.tsx b/ui/app/(platform)/students/page.tsx
index 576d539..6a24f2b 100644
--- a/ui/app/(platform)/students/page.tsx
+++ b/ui/app/(platform)/students/page.tsx
@@ -4,17 +4,26 @@ import { useEffect, useState } from "react";
 import styles from "./page.module.scss";
 import { useDispatch, useSelector } from "react-redux";
 import { AppDispatch, RootState } from "@/app/store";
-import { createGroup, fetchGroups } from "@/app/features/groupsSlice";
-import { createUser, deleteUser, fetchUsers } from "@/app/features/usersSlice";
+import { fetchGroups } from "@/app/features/groupsSlice";
+import { deleteUser, fetchUsers } from "@/app/features/usersSlice";
 import { User } from "@/app/features/interfaces/User";
 import { Group } from "@/app/features/interfaces/Group";
 import Link from "next/link";
+import { useRouter } from "next/navigation";
 
 const Admin = () => {
   const groupsList = useSelector((state: RootState) => state.groups.entities);
   const usersList = useSelector((state: RootState) => state.users.entities);
+  const user = useSelector((state: RootState) => state.users.activeUser);
+
+  const [groupedUsers, setGroupedUsers] = useState(null);
 
   const dispatch = useDispatch<AppDispatch>();
+  const router = useRouter();
+
+  if (user?.role !== "teacher") {
+    router.push("/profile");
+  }
 
   useEffect(() => {
     dispatch(fetchGroups());
@@ -23,7 +32,7 @@ const Admin = () => {
 
   useEffect(() => {
     if (usersList.length > 0 && groupsList.length > 0) {
-      groupUsersByGroup(usersList, groupsList);
+      setGroupedUsers(groupUsersByGroup(usersList, groupsList));
     }
   }, [usersList, groupsList, dispatch]);
 
@@ -52,38 +61,22 @@ const Admin = () => {
 
   return (
     <main>
-      <div></div>
       <div className={`${styles.wrapperStudents} wrapper`}>
+        <Link href="/admin">
+          <div className={`${styles.addStudent}`}>Добавить ученика</div>
+        </Link>
+
         <div className={styles.students}>
-          {usersList &&
-            groupsList &&
-            Object.keys(groupUsersByGroup(usersList, groupsList)).map(
-              (groupName) => {
-                const groupedUsers = groupUsersByGroup(usersList, groupsList);
-
-                return groupedUsers[groupName].length == 0 ? (
-                  <EmptyGroup groupName={groupName} />
-                ) : (
-                  <div className={styles.group}>
-                    <h2>{groupName}</h2>
-                    <ul>
-                      {groupedUsers[groupName].map((user: User) => (
-                        <li key={user.id}>
-                          <Link href={`/students/${user.id}`}>
-                            {user.name}{" "}
-                            <button
-                              onClick={() => dispatch(deleteUser(+user.id))}
-                            >
-                              X
-                            </button>
-                          </Link>
-                        </li>
-                      ))}
-                    </ul>
-                  </div>
-                );
-              }
-            )}
+          {groupedUsers &&
+            Object.keys(groupedUsers).map((groupName: string) => {
+              const group: any[] = groupedUsers[groupName];
+
+              return group.length == 0 ? (
+                <EmptyGroup groupName={groupName} />
+              ) : (
+                <GroupItem groupedUsers={groupedUsers} groupName={groupName} />
+              );
+            })}
         </div>
       </div>
     </main>
@@ -102,3 +95,32 @@ const EmptyGroup = ({ groupName }: any) => {
     </div>
   );
 };
+
+const GroupItem = ({ groupedUsers, groupName }: any) => {
+  return (
+    <div className={styles.group}>
+      <h2>{groupName}</h2>
+      <GroupList groupedUsers={groupedUsers} groupName={groupName} />
+    </div>
+  );
+};
+
+const GroupList = ({ groupedUsers, groupName }: any) => {
+  return (
+    <ul>
+      {groupedUsers[groupName].map((user: User) => (
+        <StudentItem user={user} />
+      ))}
+    </ul>
+  );
+};
+
+const StudentItem = ({ user }: any) => {
+  const dispatch = useDispatch<AppDispatch>();
+  return (
+    <li key={user.id}>
+      <Link href={`/students/${user.id}`}>{user.name}</Link>
+      <button onClick={() => dispatch(deleteUser(+user.id))}>X</button>
+    </li>
+  );
+};
diff --git a/ui/app/components/nav/NavPlatform.tsx b/ui/app/components/nav/NavPlatform.tsx
index f188b6d..c796350 100644
--- a/ui/app/components/nav/NavPlatform.tsx
+++ b/ui/app/components/nav/NavPlatform.tsx
@@ -18,8 +18,8 @@ export const NavPlatform = () => {
   return (
     <div className="menu">
       {user?.role == "teacher" && (
-        <Link href={"/admin"}>
-          <div className={`${styles.admin} menuItem`}>Добавить учеников</div>
+        <Link href={"/students"}>
+          <div className="menuItem">Ученики</div>
         </Link>
       )}
       {/* <Link href={"/chat"}>
diff --git a/ui/app/components/nav/page.module.scss b/ui/app/components/nav/page.module.scss
index 5ec7089..f73b932 100644
--- a/ui/app/components/nav/page.module.scss
+++ b/ui/app/components/nav/page.module.scss
@@ -1,10 +1,3 @@
-div {
-  &.admin {
-    border: 1px black dashed;
-    padding: 5px !important;
-  }
-}
-
 .user {
   position: relative;
 
